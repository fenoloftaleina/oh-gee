{"version":3,"sources":["cljs_webgl/texture.cljs"],"mappings":"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","names":["cljs-webgl.texture/default-pixel-store-modes","cljs-webgl.constants.webgl/unpack-flip-y-webgl","cljs-webgl.constants.webgl/unpack-premultiply-alpha-webgl","cljs-webgl.constants.webgl/unpack-colorspace-conversion-webgl","cljs-webgl.constants.parameter-name/unpack-alignment","cljs-webgl.constants.parameter-name/pack-alignment","var_args","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","cljs-webgl.texture/create-texture","p__25370","map__25371","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","seq25367","G__25369","cljs.core/first","cljs.core/next","self__4717__auto__","gl-context","image","target","pixel-store-modes","generate-mipmaps?","level-of-detail","internal-pixel-format","pixel-format","data-type","parameters","opts","texture","or__4131__auto__","cljs-webgl.constants.texture-target/texture-2d","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","seq__25377","cljs.core/seq","chunk__25378","count__25379","i__25380","vec__25387","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","temp__5735__auto__","cljs.core/chunked-seq?","c__4550__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__25390","parameter","value","cljs-webgl.constants.pixel-format/rgba","cljs-webgl.constants.data-type/unsigned-byte","seq__25393","chunk__25394","count__25395","i__25396","vec__25408","vec__25415","k","v"],"sourcesContent":["(ns cljs-webgl.texture\n  (:require\n    [cljs-webgl.constants.texture-target :as texture-target]\n    [cljs-webgl.constants.texture-parameter-name :as texture-parameter-name]\n    [cljs-webgl.constants.parameter-name :as parameter-name]\n    [cljs-webgl.constants.webgl :as webgl]\n    [cljs-webgl.constants.texture-filter :as texture-filter]\n    [cljs-webgl.constants.pixel-format :as pixel-format]\n    [cljs-webgl.constants.data-type :as data-type]))\n\n(def ^:private default-pixel-store-modes\n  \"Related OpenGL ES reference pages:\n  [glPixelStorei](http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)\"\n  {webgl/unpack-flip-y-webgl                false\n   webgl/unpack-premultiply-alpha-webgl     false\n   webgl/unpack-colorspace-conversion-webgl false\n   parameter-name/unpack-alignment          4\n   parameter-name/pack-alignment            4})\n\n\n(defn create-texture\n  \"Valid values for `target` are: `cljs-webgl.constants.texture-target/texture-2d` and\n  `texture-cube-map`. The default value is `texture-2d`.\"\n  [gl-context & {:keys [image target pixel-store-modes generate-mipmaps?\n                        level-of-detail internal-pixel-format pixel-format\n                        data-type parameters] :as opts}]\n  (let [texture (.createTexture gl-context)\n        target (or target texture-target/texture-2d)\n        pixel-store-modes (merge default-pixel-store-modes pixel-store-modes)]\n\n    (.bindTexture gl-context target texture)\n\n    (doseq [[parameter value] pixel-store-modes]\n      (.pixelStorei gl-context parameter value))\n\n    (.texImage2D\n      gl-context\n      target\n      (or level-of-detail 0)\n      (or internal-pixel-format pixel-format/rgba)\n      (or pixel-format pixel-format/rgba)\n      data-type/unsigned-byte\n      image)\n\n    (doseq [[k v] parameters]\n      (.texParameteri gl-context target k v))\n\n    (when generate-mipmaps?\n      (.generateMipmap gl-context target))\n\n    (.bindTexture gl-context target nil)\n\n    texture))\n"]}