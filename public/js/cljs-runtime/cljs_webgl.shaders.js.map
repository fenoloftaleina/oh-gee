{"version":3,"sources":["cljs_webgl/shaders.cljs"],"mappings":"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","names":["cljs-webgl.shaders/get-program-parameter","gl-context","program","parameter","cljs-webgl.shaders/get-attached-shaders","cljs.core/LazySeq","cljs-webgl.shaders/get-shader-source","shader","cljs-webgl.shaders/get-shader-info-log","cljs-webgl.shaders/get-shader-parameter","cljs-webgl.shaders/get-shader-precision-format","shader-type","precision-type","js-obj","cljs-webgl.shaders/get-attrib-location","shader-program","attrib-name","cljs-webgl.shaders/get-uniform-location","uniform-name","cljs-webgl.shaders/is-shader?","cljs-webgl.shaders/is-program?","cljs-webgl.shaders/create-shader","type","source","cljs-webgl.constants.shader-source/compile-status","js/Error","cljs-webgl.shaders/text-content","element","child","text","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs-webgl.shaders/mime-type","cljs-webgl.constants.shader/fragment-shader","cljs-webgl.constants.shader/vertex-shader","cljs-webgl.shaders/get-shader","script-id","temp__5735__auto__","script","js/document","G__25365","var_args","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","cljs-webgl.shaders/create-program","seq25366","G__25368","cljs.core/first","cljs.core/next","self__4717__auto__","shaders","seq__25373","cljs.core/seq","chunk__25374","count__25375","i__25376","cljs.core/chunked-seq?","c__4550__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs-webgl.constants.shader/link-status"],"sourcesContent":["(ns cljs-webgl.shaders\n  (:require [cljs-webgl.constants.shader :as shader]\n            [cljs-webgl.constants.shader-source :as shader-source]))\n\n(defn get-program-parameter\n  \"Returns the value of a given `parameter` in a `program` object.\n\n  Valid values for `parameter` are `cljs-webgl.constants.shader/validate-status`, `cljs-webgl.constants.shader/link-status` and `cljs-webgl.constants.shader/delete-status`.\n\n  Relevant OpenGL ES reference pages:\n\n  * [glGetProgramiv (similar to getProgramParameter)](http://www.khronos.org/opengles/sdk/docs/man/xhtml/glGetProgramiv.xml)\"\n  [gl-context program parameter]\n  (.getProgramParameter gl-context program parameter))\n\n(defn get-attached-shaders\n  \"Returns a lazy sequence of shader objects attached to a given shader `program`.\n\n  Relevant OpenGL ES reference pages:\n\n  * [glGetAttachedShaders](http://www.khronos.org/opengles/sdk/docs/man/xhtml/glGetAttachedShaders.xml)\"\n  [gl-context program]\n  (lazy-seq (.getAttachedShaders gl-context program)))\n\n(defn get-shader-source\n  \"Returns the source code for a given `shader` object.\n\n  Relevant OpenGL ES reference pages:\n\n  * [glGetShaderSource](http://www.khronos.org/opengles/sdk/docs/man/xhtml/glGetShaderSource.xml)\"\n  [gl-context shader]\n  (.getShaderSource gl-context shader))\n\n(defn get-shader-info-log\n  \"Returns the information log for a given `shader` object. Useful for checking for compile errors.\n\n  Relevant OpenGL ES reference pages:\n\n  * [glGetShaderInfoLog](http://www.khronos.org/opengles/sdk/docs/man/xhtml/glGetShaderInfoLog.xml)\"\n  [gl-context shader]\n  (.getShaderInfoLog gl-context shader))\n\n(defn get-shader-parameter\n  \"Returns the value of a given `parameter` in a `shader` object.\n\n  Valid values for `parameter` are `cljs-webgl.constants.shader/shader-type`, `cljs-webgl.constants.shader/compile-status` and `cljs-webgl.constants.shader/delete-status`.\n\n  Relevant OpenGL ES reference pages:\n\n  * [glGetShaderiv(similar to getShaderParameter)](http://www.khronos.org/opengles/sdk/docs/man/xhtml/glGetShaderiv.xml)\"\n  [gl-context shader parameter]\n  (.getShaderParameter gl-context shader parameter))\n\n(defn get-shader-precision-format\n  \"Returns a map describing the range and precision for the specified `shader-type` and `precision-type`. The returned map\n  has the following form:\n\n    {:range-min\n     :range-max\n     :precision}\n\n  Valid values for `shader-type` are `cljs-webgl.constants.shader/fragment-shader` and `cljs-webgl.constants.shader/vertex-shader`.\n\n  Valid values for `precision type` are `cljs-webgl.constants.shader-precision-specified-types/low-float`,\n  `cljs-webgl.constants.shader-precision-specified-types/medium-float`,\n  `cljs-webgl.constants.shader-precision-specified-types/high-float`, `cljs-webgl.constants.shader-precision-specified-types/low-int`,\n  `cljs-webgl.constants.shader-precision-specified-types/medium-int` and `cljs-webgl.constants.shader-precision-specified-types/high-int`\n\n  Relevant OpenGL ES reference pages:\n\n  * [glGetShaderPrecisionFormat](http://www.khronos.org/opengles/sdk/docs/man/xhtml/glGetShaderPrecisionFormat.xml)\"\n  [gl-context shader-type precision-type]\n  (let [js-obj (.getShaderPrecisionFormat gl-context shader-type precision-type)]\n    {:range-min (.-rangeMin js-obj)\n     :range-max (.-rangeMax js-obj)\n     :precision (.-precision js-obj)}))\n\n(defn get-attrib-location\n  \"Returns the attribute - specified by it's name - location in a given `shader-program`.\n\n  Relevant OpenGL ES reference pages:\n\n  * [glGetAttribLocation](http://www.khronos.org/opengles/sdk/docs/man/xhtml/glGetAttribLocation.xml)\"\n  [gl-context shader-program attrib-name]\n  (.getAttribLocation gl-context shader-program attrib-name))\n\n(defn get-uniform-location\n  \"Returns the uniform - specified by it's name - location in a given `shader-program`.\n\n  Relevant OpenGL ES reference pages:\n\n  * [glGetUniformLocation](http://www.khronos.org/opengles/sdk/docs/man/xhtml/glGetUniformLocation.xml)\"\n  [gl-context shader-program uniform-name]\n  (.getUniformLocation gl-context shader-program uniform-name))\n\n(defn is-shader?\n  \"Returns whether a given shader object is valid.\n\n  Relevant OpenGL ES reference pages:\n\n  * [glIsShader](http://www.khronos.org/opengles/sdk/docs/man/xhtml/glIsShader.xml)\"\n  [gl-context shader]\n  (.isShader gl-context shader))\n\n(defn is-program?\n  \"Returns whether a given shader program is valid.\n\n  Relevant OpenGL ES reference pages:\n\n  * [glIsProgram](http://www.khronos.org/opengles/sdk/docs/man/xhtml/glIsProgram.xml)\"\n  [gl-context shader-program]\n  (.isProgram gl-context shader-program))\n\n(defn create-shader\n  \"Returns a compiled vertex or fragment shader object (specified by the `type` parameter)\n   for a given `source`. If the shader cannot be compiled successfully, an error is thrown.\n\n  The valid values for `type` are `cljs-webgl.constants.shader/vertex-shader` and `cljs-webgl.constants.shader/fragment-shader`.\n\n  Relevant OpenGL ES reference pages:\n\n  * [glCreateShader](http://www.khronos.org/opengles/sdk/docs/man/xhtml/glCreateShader.xml)\n  * [glShaderSource](http://www.khronos.org/opengles/sdk/docs/man/xhtml/glShaderSource.xml)\n  * [glCompileShader](http://www.khronos.org/opengles/sdk/docs/man/xhtml/glCompileShader.xml)\"\n  [gl-context type source]\n  (let [shader (.createShader gl-context type)]\n    (.shaderSource gl-context shader source)\n    (.compileShader gl-context shader)\n\n    (when-not (get-shader-parameter gl-context shader shader-source/compile-status)\n      (throw (js/Error. (get-shader-info-log gl-context shader))))\n\n    shader))\n\n\n(defn ^:private text-content\n  \"Grabs the text content of the element's children\"\n  [element]\n  (loop [child (.-firstChild element)\n         text  \"\"]\n    (if (nil? child)\n      text\n      (recur\n        (.-nextSibling child)\n        (str\n          text\n          (when (= (.-nodeType child) 3) ; 3=TEXT_NODE\n            (.-textContent child)))))))\n\n(def ^:private mime-type\n  \"Mapping of mime/type to relevant GL constant\"\n  {\"x-shader/x-fragment\" shader/fragment-shader\n   \"x-shader/x-vertex\"   shader/vertex-shader})\n\n(defn get-shader\n  \"Returns a compiled vertext or fragment shader, loaded from the script-id\"\n  [gl-context script-id]\n  (when-let [script (.getElementById js/document script-id)]\n    (create-shader\n      gl-context\n      (mime-type (.-type script))\n      (text-content script))))\n\n(defn create-program\n  \"Returns a linked shader program composed of the compiled shader objects\n   specified by the `shaders` parameter. Throws an error if the program was\n   not linked successfully.\n\n  Relevant OpenGL ES reference pages:\n\n  * [glCreateProgram](http://www.khronos.org/opengles/sdk/docs/man/xhtml/glCreateProgram.xml)\n  * [glAttachShader](http://www.khronos.org/opengles/sdk/docs/man/xhtml/glAttachShader.xml)\n  * [glLinkProgram](http://www.khronos.org/opengles/sdk/docs/man/xhtml/glLinkProgram.xml)\"\n  [gl-context & shaders]\n  (let [program (.createProgram gl-context)]\n\n    (doseq [shader shaders]\n      (.attachShader gl-context program shader))\n\n    (.linkProgram gl-context program)\n\n    (when-not (get-program-parameter gl-context program shader/link-status)\n      (throw (js/Error. \"Could not initialize shaders\")))\n\n    (.useProgram gl-context program)\n    program))\n\n"]}