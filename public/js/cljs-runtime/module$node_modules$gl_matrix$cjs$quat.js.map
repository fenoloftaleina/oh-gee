{
"version":3,
"file":"module$node_modules$gl_matrix$cjs$quat.js",
"lineCount":13,
"mappings":"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",
"sources":["node_modules/gl-matrix/cjs/quat.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$gl_matrix$cjs$quat\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.create = create;\nexports.identity = identity;\nexports.setAxisAngle = setAxisAngle;\nexports.getAxisAngle = getAxisAngle;\nexports.multiply = multiply;\nexports.rotateX = rotateX;\nexports.rotateY = rotateY;\nexports.rotateZ = rotateZ;\nexports.calculateW = calculateW;\nexports.slerp = slerp;\nexports.random = random;\nexports.invert = invert;\nexports.conjugate = conjugate;\nexports.fromMat3 = fromMat3;\nexports.fromEuler = fromEuler;\nexports.str = str;\nexports.setAxes = exports.sqlerp = exports.rotationTo = exports.equals = exports.exactEquals = exports.normalize = exports.sqrLen = exports.squaredLength = exports.len = exports.length = exports.lerp = exports.dot = exports.scale = exports.mul = exports.add = exports.set = exports.copy = exports.fromValues = exports.clone = void 0;\n\nvar glMatrix = _interopRequireWildcard(require(\"./common.js\"));\n\nvar mat3 = _interopRequireWildcard(require(\"./mat3.js\"));\n\nvar vec3 = _interopRequireWildcard(require(\"./vec3.js\"));\n\nvar vec4 = _interopRequireWildcard(require(\"./vec4.js\"));\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }\n\n/**\r\n * Quaternion\r\n * @module quat\r\n */\n\n/**\r\n * Creates a new identity quat\r\n *\r\n * @returns {quat} a new quaternion\r\n */\nfunction create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Set a quat to the identity quaternion\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @returns {quat} out\r\n */\n\n\nfunction identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Sets a quat from the given angle and rotation axis,\r\n * then returns it.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {vec3} axis the axis around which to rotate\r\n * @param {Number} rad the angle in radians\r\n * @returns {quat} out\r\n **/\n\n\nfunction setAxisAngle(out, axis, rad) {\n  rad = rad * 0.5;\n  var s = Math.sin(rad);\n  out[0] = s * axis[0];\n  out[1] = s * axis[1];\n  out[2] = s * axis[2];\n  out[3] = Math.cos(rad);\n  return out;\n}\n/**\r\n * Gets the rotation axis and angle for a given\r\n *  quaternion. If a quaternion is created with\r\n *  setAxisAngle, this method will return the same\r\n *  values as providied in the original parameter list\r\n *  OR functionally equivalent values.\r\n * Example: The quaternion formed by axis [0, 0, 1] and\r\n *  angle -90 is the same as the quaternion formed by\r\n *  [0, 0, 1] and 270. This method favors the latter.\r\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\r\n * @param  {quat} q     Quaternion to be decomposed\r\n * @return {Number}     Angle, in radians, of the rotation\r\n */\n\n\nfunction getAxisAngle(out_axis, q) {\n  var rad = Math.acos(q[3]) * 2.0;\n  var s = Math.sin(rad / 2.0);\n\n  if (s > glMatrix.EPSILON) {\n    out_axis[0] = q[0] / s;\n    out_axis[1] = q[1] / s;\n    out_axis[2] = q[2] / s;\n  } else {\n    // If s is zero, return any axis (no rotation - axis does not matter)\n    out_axis[0] = 1;\n    out_axis[1] = 0;\n    out_axis[2] = 0;\n  }\n\n  return rad;\n}\n/**\r\n * Multiplies two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @returns {quat} out\r\n */\n\n\nfunction multiply(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  out[0] = ax * bw + aw * bx + ay * bz - az * by;\n  out[1] = ay * bw + aw * by + az * bx - ax * bz;\n  out[2] = az * bw + aw * bz + ax * by - ay * bx;\n  out[3] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\r\n * Rotates a quaternion by the given angle about the X axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {quat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\n\n\nfunction rotateX(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + aw * bx;\n  out[1] = ay * bw + az * bx;\n  out[2] = az * bw - ay * bx;\n  out[3] = aw * bw - ax * bx;\n  return out;\n}\n/**\r\n * Rotates a quaternion by the given angle about the Y axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {quat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\n\n\nfunction rotateY(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var by = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw - az * by;\n  out[1] = ay * bw + aw * by;\n  out[2] = az * bw + ax * by;\n  out[3] = aw * bw - ay * by;\n  return out;\n}\n/**\r\n * Rotates a quaternion by the given angle about the Z axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {quat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\n\n\nfunction rotateZ(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bz = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + ay * bz;\n  out[1] = ay * bw - ax * bz;\n  out[2] = az * bw + aw * bz;\n  out[3] = aw * bw - az * bz;\n  return out;\n}\n/**\r\n * Calculates the W component of a quat from the X, Y, and Z components.\r\n * Assumes that quaternion is 1 unit in length.\r\n * Any existing W component will be ignored.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate W component of\r\n * @returns {quat} out\r\n */\n\n\nfunction calculateW(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\n  return out;\n}\n/**\r\n * Performs a spherical linear interpolation between two quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n */\n\n\nfunction slerp(out, a, b, t) {\n  // benchmarks:\n  //    http://jsperf.com/quaternion-slerp-implementations\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  var omega, cosom, sinom, scale0, scale1; // calc cosine\n\n  cosom = ax * bx + ay * by + az * bz + aw * bw; // adjust signs (if necessary)\n\n  if (cosom < 0.0) {\n    cosom = -cosom;\n    bx = -bx;\n    by = -by;\n    bz = -bz;\n    bw = -bw;\n  } // calculate coefficients\n\n\n  if (1.0 - cosom > glMatrix.EPSILON) {\n    // standard case (slerp)\n    omega = Math.acos(cosom);\n    sinom = Math.sin(omega);\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\n    scale1 = Math.sin(t * omega) / sinom;\n  } else {\n    // \"from\" and \"to\" quaternions are very close\n    //  ... so we can do a linear interpolation\n    scale0 = 1.0 - t;\n    scale1 = t;\n  } // calculate final values\n\n\n  out[0] = scale0 * ax + scale1 * bx;\n  out[1] = scale0 * ay + scale1 * by;\n  out[2] = scale0 * az + scale1 * bz;\n  out[3] = scale0 * aw + scale1 * bw;\n  return out;\n}\n/**\r\n * Generates a random quaternion\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @returns {quat} out\r\n */\n\n\nfunction random(out) {\n  // Implementation of http://planning.cs.uiuc.edu/node198.html\n  // TODO: Calling random 3 times is probably not the fastest solution\n  var u1 = glMatrix.RANDOM();\n  var u2 = glMatrix.RANDOM();\n  var u3 = glMatrix.RANDOM();\n  var sqrt1MinusU1 = Math.sqrt(1 - u1);\n  var sqrtU1 = Math.sqrt(u1);\n  out[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);\n  out[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);\n  out[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);\n  out[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);\n  return out;\n}\n/**\r\n * Calculates the inverse of a quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate inverse of\r\n * @returns {quat} out\r\n */\n\n\nfunction invert(out, a) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\n  var invDot = dot ? 1.0 / dot : 0; // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n  out[0] = -a0 * invDot;\n  out[1] = -a1 * invDot;\n  out[2] = -a2 * invDot;\n  out[3] = a3 * invDot;\n  return out;\n}\n/**\r\n * Calculates the conjugate of a quat\r\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate conjugate of\r\n * @returns {quat} out\r\n */\n\n\nfunction conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Creates a quaternion from the given 3x3 rotation matrix.\r\n *\r\n * NOTE: The resultant quaternion is not normalized, so you should be sure\r\n * to renormalize the quaternion yourself where necessary.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {mat3} m rotation matrix\r\n * @returns {quat} out\r\n * @function\r\n */\n\n\nfunction fromMat3(out, m) {\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n  // article \"Quaternion Calculus and Fast Animation\".\n  var fTrace = m[0] + m[4] + m[8];\n  var fRoot;\n\n  if (fTrace > 0.0) {\n    // |w| > 1/2, may as well choose w > 1/2\n    fRoot = Math.sqrt(fTrace + 1.0); // 2w\n\n    out[3] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot; // 1/(4w)\n\n    out[0] = (m[5] - m[7]) * fRoot;\n    out[1] = (m[6] - m[2]) * fRoot;\n    out[2] = (m[1] - m[3]) * fRoot;\n  } else {\n    // |w| <= 1/2\n    var i = 0;\n    if (m[4] > m[0]) i = 1;\n    if (m[8] > m[i * 3 + i]) i = 2;\n    var j = (i + 1) % 3;\n    var k = (i + 2) % 3;\n    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\n    out[i] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot;\n    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\n    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\n    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\n  }\n\n  return out;\n}\n/**\r\n * Creates a quaternion from the given euler angle x, y, z.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {x} Angle to rotate around X axis in degrees.\r\n * @param {y} Angle to rotate around Y axis in degrees.\r\n * @param {z} Angle to rotate around Z axis in degrees.\r\n * @returns {quat} out\r\n * @function\r\n */\n\n\nfunction fromEuler(out, x, y, z) {\n  var halfToRad = 0.5 * Math.PI / 180.0;\n  x *= halfToRad;\n  y *= halfToRad;\n  z *= halfToRad;\n  var sx = Math.sin(x);\n  var cx = Math.cos(x);\n  var sy = Math.sin(y);\n  var cy = Math.cos(y);\n  var sz = Math.sin(z);\n  var cz = Math.cos(z);\n  out[0] = sx * cy * cz - cx * sy * sz;\n  out[1] = cx * sy * cz + sx * cy * sz;\n  out[2] = cx * cy * sz - sx * sy * cz;\n  out[3] = cx * cy * cz + sx * sy * sz;\n  return out;\n}\n/**\r\n * Returns a string representation of a quatenion\r\n *\r\n * @param {quat} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\n\nfunction str(a) {\n  return 'quat(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n}\n/**\r\n * Creates a new quat initialized with values from an existing quaternion\r\n *\r\n * @param {quat} a quaternion to clone\r\n * @returns {quat} a new quaternion\r\n * @function\r\n */\n\n\nvar clone = vec4.clone;\n/**\r\n * Creates a new quat initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {quat} a new quaternion\r\n * @function\r\n */\n\nexports.clone = clone;\nvar fromValues = vec4.fromValues;\n/**\r\n * Copy the values from one quat to another\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the source quaternion\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexports.fromValues = fromValues;\nvar copy = vec4.copy;\n/**\r\n * Set the components of a quat to the given values\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexports.copy = copy;\nvar set = vec4.set;\n/**\r\n * Adds two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexports.set = set;\nvar add = vec4.add;\n/**\r\n * Alias for {@link quat.multiply}\r\n * @function\r\n */\n\nexports.add = add;\nvar mul = multiply;\n/**\r\n * Scales a quat by a scalar number\r\n *\r\n * @param {quat} out the receiving vector\r\n * @param {quat} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexports.mul = mul;\nvar scale = vec4.scale;\n/**\r\n * Calculates the dot product of two quat's\r\n *\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @returns {Number} dot product of a and b\r\n * @function\r\n */\n\nexports.scale = scale;\nvar dot = vec4.dot;\n/**\r\n * Performs a linear interpolation between two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexports.dot = dot;\nvar lerp = vec4.lerp;\n/**\r\n * Calculates the length of a quat\r\n *\r\n * @param {quat} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexports.lerp = lerp;\nvar length = vec4.length;\n/**\r\n * Alias for {@link quat.length}\r\n * @function\r\n */\n\nexports.length = length;\nvar len = length;\n/**\r\n * Calculates the squared length of a quat\r\n *\r\n * @param {quat} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n * @function\r\n */\n\nexports.len = len;\nvar squaredLength = vec4.squaredLength;\n/**\r\n * Alias for {@link quat.squaredLength}\r\n * @function\r\n */\n\nexports.squaredLength = squaredLength;\nvar sqrLen = squaredLength;\n/**\r\n * Normalize a quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quaternion to normalize\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexports.sqrLen = sqrLen;\nvar normalize = vec4.normalize;\n/**\r\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {quat} a The first quaternion.\r\n * @param {quat} b The second quaternion.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexports.normalize = normalize;\nvar exactEquals = vec4.exactEquals;\n/**\r\n * Returns whether or not the quaternions have approximately the same elements in the same position.\r\n *\r\n * @param {quat} a The first vector.\r\n * @param {quat} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexports.exactEquals = exactEquals;\nvar equals = vec4.equals;\n/**\r\n * Sets a quaternion to represent the shortest rotation from one\r\n * vector to another.\r\n *\r\n * Both vectors are assumed to be unit length.\r\n *\r\n * @param {quat} out the receiving quaternion.\r\n * @param {vec3} a the initial vector\r\n * @param {vec3} b the destination vector\r\n * @returns {quat} out\r\n */\n\nexports.equals = equals;\n\nvar rotationTo = function () {\n  var tmpvec3 = vec3.create();\n  var xUnitVec3 = vec3.fromValues(1, 0, 0);\n  var yUnitVec3 = vec3.fromValues(0, 1, 0);\n  return function (out, a, b) {\n    var dot = vec3.dot(a, b);\n\n    if (dot < -0.999999) {\n      vec3.cross(tmpvec3, xUnitVec3, a);\n      if (vec3.len(tmpvec3) < 0.000001) vec3.cross(tmpvec3, yUnitVec3, a);\n      vec3.normalize(tmpvec3, tmpvec3);\n      setAxisAngle(out, tmpvec3, Math.PI);\n      return out;\n    } else if (dot > 0.999999) {\n      out[0] = 0;\n      out[1] = 0;\n      out[2] = 0;\n      out[3] = 1;\n      return out;\n    } else {\n      vec3.cross(tmpvec3, a, b);\n      out[0] = tmpvec3[0];\n      out[1] = tmpvec3[1];\n      out[2] = tmpvec3[2];\n      out[3] = 1 + dot;\n      return normalize(out, out);\n    }\n  };\n}();\n/**\r\n * Performs a spherical linear interpolation with two control points\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @param {quat} c the third operand\r\n * @param {quat} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n */\n\n\nexports.rotationTo = rotationTo;\n\nvar sqlerp = function () {\n  var temp1 = create();\n  var temp2 = create();\n  return function (out, a, b, c, d, t) {\n    slerp(temp1, a, d, t);\n    slerp(temp2, b, c, t);\n    slerp(out, temp1, temp2, 2 * t * (1 - t));\n    return out;\n  };\n}();\n/**\r\n * Sets the specified quaternion with values corresponding to the given\r\n * axes. Each axis is a vec3 and is expected to be unit length and\r\n * perpendicular to all other specified axes.\r\n *\r\n * @param {vec3} view  the vector representing the viewing direction\r\n * @param {vec3} right the vector representing the local \"right\" direction\r\n * @param {vec3} up    the vector representing the local \"up\" direction\r\n * @returns {quat} out\r\n */\n\n\nexports.sqlerp = sqlerp;\n\nvar setAxes = function () {\n  var matr = mat3.create();\n  return function (out, view, right, up) {\n    matr[0] = right[0];\n    matr[3] = right[1];\n    matr[6] = right[2];\n    matr[1] = up[0];\n    matr[4] = up[1];\n    matr[7] = up[2];\n    matr[2] = -view[0];\n    matr[5] = -view[1];\n    matr[8] = -view[2];\n    return normalize(out, fromMat3(out, matr));\n  };\n}();\n\nexports.setAxes = setAxes;\n};"],
"names":["shadow$provide","global","require","module","exports","_interopRequireWildcard","obj","__esModule","newObj","key","Object","prototype","hasOwnProperty","call","desc","defineProperty","getOwnPropertyDescriptor","get","set","default","create","out","glMatrix","ARRAY_TYPE","Float32Array","setAxisAngle","axis","rad","s","Math","sin","cos","multiply","a","b","ax","ay","az","aw","bx","by","bz","bw","slerp","t","cosom","EPSILON","omega","acos","sinom","scale0","scale1","fromMat3","m","fTrace","fRoot","sqrt","i","j","k","value","identity","getAxisAngle","out_axis","q","rotateX","rotateY","rotateZ","calculateW","x","y","z","abs","random","u1","RANDOM","u2","u3","sqrt1MinusU1","sqrtU1","PI","invert","a0","a1","a2","a3","dot","invDot","conjugate","fromEuler","halfToRad","sx","cx","sy","cy","sz","cz","str","setAxes","sqlerp","rotationTo","equals","exactEquals","normalize","sqrLen","squaredLength","len","length","lerp","scale","mul","add","copy","fromValues","clone","mat3","vec3","vec4","tmpvec3","xUnitVec3","yUnitVec3","cross","temp1","temp2","c","d","matr","view","right","up"]
}
