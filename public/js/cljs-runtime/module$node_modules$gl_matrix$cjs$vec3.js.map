{
"version":3,
"file":"module$node_modules$gl_matrix$cjs$vec3.js",
"lineCount":15,
"mappings":"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",
"sources":["node_modules/gl-matrix/cjs/vec3.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$gl_matrix$cjs$vec3\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.create = create;\nexports.clone = clone;\nexports.length = length;\nexports.fromValues = fromValues;\nexports.copy = copy;\nexports.set = set;\nexports.add = add;\nexports.subtract = subtract;\nexports.multiply = multiply;\nexports.divide = divide;\nexports.ceil = ceil;\nexports.floor = floor;\nexports.min = min;\nexports.max = max;\nexports.round = round;\nexports.scale = scale;\nexports.scaleAndAdd = scaleAndAdd;\nexports.distance = distance;\nexports.squaredDistance = squaredDistance;\nexports.squaredLength = squaredLength;\nexports.negate = negate;\nexports.inverse = inverse;\nexports.normalize = normalize;\nexports.dot = dot;\nexports.cross = cross;\nexports.lerp = lerp;\nexports.hermite = hermite;\nexports.bezier = bezier;\nexports.random = random;\nexports.transformMat4 = transformMat4;\nexports.transformMat3 = transformMat3;\nexports.transformQuat = transformQuat;\nexports.rotateX = rotateX;\nexports.rotateY = rotateY;\nexports.rotateZ = rotateZ;\nexports.angle = angle;\nexports.zero = zero;\nexports.str = str;\nexports.exactEquals = exactEquals;\nexports.equals = equals;\nexports.forEach = exports.sqrLen = exports.len = exports.sqrDist = exports.dist = exports.div = exports.mul = exports.sub = void 0;\n\nvar glMatrix = _interopRequireWildcard(require(\"./common.js\"));\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }\n\n/**\r\n * 3 Dimensional Vector\r\n * @module vec3\r\n */\n\n/**\r\n * Creates a new, empty vec3\r\n *\r\n * @returns {vec3} a new 3D vector\r\n */\nfunction create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec3 initialized with values from an existing vector\r\n *\r\n * @param {vec3} a vector to clone\r\n * @returns {vec3} a new 3D vector\r\n */\n\n\nfunction clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\r\n * Calculates the length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\n\nfunction length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.sqrt(x * x + y * y + z * z);\n}\n/**\r\n * Creates a new vec3 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} a new 3D vector\r\n */\n\n\nfunction fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Copy the values from one vec3 to another\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the source vector\r\n * @returns {vec3} out\r\n */\n\n\nfunction copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\r\n * Set the components of a vec3 to the given values\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} out\r\n */\n\n\nfunction set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Adds two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\n\nfunction add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\n\nfunction subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\r\n * Multiplies two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\n\nfunction multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\r\n * Divides two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\n\nfunction divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to ceil\r\n * @returns {vec3} out\r\n */\n\n\nfunction ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to floor\r\n * @returns {vec3} out\r\n */\n\n\nfunction floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\n\nfunction min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\n\nfunction max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to round\r\n * @returns {vec3} out\r\n */\n\n\nfunction round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\r\n * Scales a vec3 by a scalar number\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec3} out\r\n */\n\n\nfunction scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\r\n * Adds two vec3's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec3} out\r\n */\n\n\nfunction scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\n\nfunction distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.sqrt(x * x + y * y + z * z);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\n\nfunction squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\r\n * Calculates the squared length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\n\nfunction squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\r\n * Negates the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to negate\r\n * @returns {vec3} out\r\n */\n\n\nfunction negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to invert\r\n * @returns {vec3} out\r\n */\n\n\nfunction inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\r\n * Normalize a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to normalize\r\n * @returns {vec3} out\r\n */\n\n\nfunction normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\n\nfunction dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\r\n * Computes the cross product of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\n\nfunction cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\r\n * Performs a linear interpolation between two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\n\nfunction lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\r\n * Performs a hermite interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {vec3} c the third operand\r\n * @param {vec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\n\nfunction hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\r\n * Performs a bezier interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {vec3} c the third operand\r\n * @param {vec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\n\nfunction bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec3} out\r\n */\n\n\nfunction random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\r\n * Transforms the vec3 with a mat4.\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec3} out\r\n */\n\n\nfunction transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\r\n * Transforms the vec3 with a mat3.\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {mat3} m the 3x3 matrix to transform with\r\n * @returns {vec3} out\r\n */\n\n\nfunction transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\r\n * Transforms the vec3 with a quat\r\n * Can also be used for dual quaternions. (Multiply it with the real part)\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {quat} q quaternion to transform with\r\n * @returns {vec3} out\r\n */\n\n\nfunction transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the x-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\n\n\nfunction rotateX(out, a, b, c) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(c) - p[2] * Math.sin(c);\n  r[2] = p[1] * Math.sin(c) + p[2] * Math.cos(c); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the y-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\n\n\nfunction rotateY(out, a, b, c) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(c) + p[0] * Math.cos(c);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(c) - p[0] * Math.sin(c); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the z-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\n\n\nfunction rotateZ(out, a, b, c) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(c) - p[1] * Math.sin(c);\n  r[1] = p[0] * Math.sin(c) + p[1] * Math.cos(c);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Get the angle between two 3D vectors\r\n * @param {vec3} a The first operand\r\n * @param {vec3} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\n\n\nfunction angle(a, b) {\n  var tempA = fromValues(a[0], a[1], a[2]);\n  var tempB = fromValues(b[0], b[1], b[2]);\n  normalize(tempA, tempA);\n  normalize(tempB, tempB);\n  var cosine = dot(tempA, tempB);\n\n  if (cosine > 1.0) {\n    return 0;\n  } else if (cosine < -1.0) {\n    return Math.PI;\n  } else {\n    return Math.acos(cosine);\n  }\n}\n/**\r\n * Set the components of a vec3 to zero\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @returns {vec3} out\r\n */\n\n\nfunction zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec3} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\n\nfunction str(a) {\n  return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';\n}\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec3} a The first vector.\r\n * @param {vec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\n\nfunction exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec3} a The first vector.\r\n * @param {vec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\n\nfunction equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\r\n * Alias for {@link vec3.subtract}\r\n * @function\r\n */\n\n\nvar sub = subtract;\n/**\r\n * Alias for {@link vec3.multiply}\r\n * @function\r\n */\n\nexports.sub = sub;\nvar mul = multiply;\n/**\r\n * Alias for {@link vec3.divide}\r\n * @function\r\n */\n\nexports.mul = mul;\nvar div = divide;\n/**\r\n * Alias for {@link vec3.distance}\r\n * @function\r\n */\n\nexports.div = div;\nvar dist = distance;\n/**\r\n * Alias for {@link vec3.squaredDistance}\r\n * @function\r\n */\n\nexports.dist = dist;\nvar sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec3.length}\r\n * @function\r\n */\n\nexports.sqrDist = sqrDist;\nvar len = length;\n/**\r\n * Alias for {@link vec3.squaredLength}\r\n * @function\r\n */\n\nexports.len = len;\nvar sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec3s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexports.sqrLen = sqrLen;\n\nvar forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();\n\nexports.forEach = forEach;\n};"],
"names":["shadow$provide","global","require","module","exports","create","out","glMatrix","ARRAY_TYPE","Float32Array","length","a","x","y","z","Math","sqrt","fromValues","subtract","b","multiply","divide","distance","squaredDistance","squaredLength","normalize","len","dot","Object","defineProperty","value","clone","copy","set","add","ceil","floor","min","max","round","scale","scaleAndAdd","negate","inverse","cross","ax","ay","az","bx","by","bz","lerp","t","hermite","c","d","factorTimes2","factor1","factor2","factor3","factor4","bezier","inverseFactor","inverseFactorTimesTwo","random","r","RANDOM","PI","zScale","cos","sin","transformMat4","m","w","transformMat3","transformQuat","q","qx","qy","qz","uvx","uvy","uvz","w2","qw","rotateX","p","rotateY","rotateZ","angle","tempA","tempB","cosine","acos","zero","str","exactEquals","equals","a0","a1","a2","b0","b1","b2","abs","EPSILON","forEach","sqrLen","sqrDist","dist","div","mul","sub","_interopRequireWildcard","obj","__esModule","newObj","key","prototype","hasOwnProperty","call","desc","getOwnPropertyDescriptor","get","default","vec","stride","offset","count","fn","arg","l","i"]
}
