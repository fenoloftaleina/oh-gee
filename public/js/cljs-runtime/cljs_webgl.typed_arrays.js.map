{"version":3,"sources":["cljs_webgl/typed_arrays.cljs"],"mappings":";;AAEA;;;AAAA,AAAMA,AAEHC;AAFH,AAGE,AAAAC,AAAe,AAACC,AAAQF;;AAE1B;;;AAAA,AAAMG,AAEHH;AAFH,AAGE,AAAAI,AAAgB,AAACF,AAAQF;;AAE3B;;;AAAA,AAAMK,AAEHL;AAFH,AAGE,AAAAM,AAAuB,AAACJ,AAAQF;;AAElC;;;AAAA,AAAMO,AAEHP;AAFH,AAGE,AAAAQ,AAAgB,AAACN,AAAQF;;AAE3B;;;AAAA,AAAMS,AAEHT;AAFH,AAGE,AAAAU,AAAiB,AAACR,AAAQF;;AAE5B;;;AAAA,AAAMW,AAEHX;AAFH,AAGE,AAAAY,AAAgB,AAACV,AAAQF;;AAE3B;;;AAAA,AAAMa,AAEHb;AAFH,AAGE,AAAAc,AAAiB,AAACZ,AAAQF;;AAE5B;;;AAAA,AAAMe,AAEHf;AAFH,AAGE,AAAAgB,AAAkB,AAACd,AAAQF;;AAE7B;;;AAAA,AAAMiB,AAEHjB;AAFH,AAGE,AAAAkB,AAAkB,AAAChB,AAAQF;;AAE7B;;;AAAA,AAAMmB,AAEHC;AAFH,AAGE,AAAMC,AAAW,AAACC,AAAKF;AAAvB,AACE,AACC,AAACG,AAAEF,AAAWpB,AACd,AAACsB,AAAEF,AAAWjB,AACd,AAACmB,AAAEF,AAAWf,AACd,AAACiB,AAAEF,AAAWb,AACd,AAACe,AAAEF,AAAWX,AACd,AAACa,AAAEF,AAAWT,AACd,AAACW,AAAEF,AAAWP,AACd,AAACS,AAAEF,AAAWL,AACd,AAACO,AAAEF,AAAWH","names":["cljs-webgl.typed-arrays/int8","collection","js/Int8Array","cljs.core/clj->js","cljs-webgl.typed-arrays/unsigned-int8","js/Uint8Array","cljs-webgl.typed-arrays/unsigned-int8-clamped","js/Uint8ClampedArray","cljs-webgl.typed-arrays/int16","js/Int16Array","cljs-webgl.typed-arrays/unsigned-int16","js/Uint16Array","cljs-webgl.typed-arrays/int32","js/Int32Array","cljs-webgl.typed-arrays/unsigned-int32","js/Uint32Array","cljs-webgl.typed-arrays/float32","js/Float32Array","cljs-webgl.typed-arrays/float64","js/Float64Array","cljs-webgl.typed-arrays/typed-array?","value","value-type","cljs.core/type","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2"],"sourcesContent":["(ns cljs-webgl.typed-arrays)\n\n(defn int8\n  \"Creates a native Int8Array for a given `collection`.\"\n  [collection]\n  (js/Int8Array. (clj->js collection)))\n\n(defn unsigned-int8\n  \"Creates a native Uint8Array for a given `collection`.\"\n  [collection]\n  (js/Uint8Array. (clj->js collection)))\n\n(defn unsigned-int8-clamped\n  \"Creates a native Uint8ClampedArray for a given `collection`.\"\n  [collection]\n  (js/Uint8ClampedArray. (clj->js collection)))\n\n(defn int16\n  \"Creates a native Int16Array for a given `collection`.\"\n  [collection]\n  (js/Int16Array. (clj->js collection)))\n\n(defn unsigned-int16\n  \"Creates a native Uint16Array for a given `collection`.\"\n  [collection]\n  (js/Uint16Array. (clj->js collection)))\n\n(defn int32\n  \"Creates a native Int32Array for a given `collection`.\"\n  [collection]\n  (js/Int32Array. (clj->js collection)))\n\n(defn unsigned-int32\n  \"Creates a native Uint32Array for a given `collection`.\"\n  [collection]\n  (js/Uint32Array. (clj->js collection)))\n\n(defn float32\n  \"Creates a native Float32Array for a given `collection`.\"\n  [collection]\n  (js/Float32Array. (clj->js collection)))\n\n(defn float64\n  \"Creates a native Float64Array for a given `collection`.\"\n  [collection]\n  (js/Float64Array. (clj->js collection)))\n\n(defn typed-array?\n  \"Tests whether a given `value` is a typed array.\"\n  [value]\n  (let [value-type (type value)]\n    (or \n     (= value-type js/Int8Array)\n     (= value-type js/Uint8Array)\n     (= value-type js/Uint8ClampedArray)\n     (= value-type js/Int16Array)\n     (= value-type js/Uint16Array)\n     (= value-type js/Int32Array)\n     (= value-type js/Uint32Array)\n     (= value-type js/Float32Array)\n     (= value-type js/Float64Array))))\n"]}