{"version":3,"sources":["cljs_webgl/common.cljs"],"mappings":"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","names":["cljs.core/enable-console-print!","cljs-webgl.common/init-gl","canvas","gl","cljs_webgl.context.get_context.cljs$core$IFn$_invoke$arity$1","js/Error","cljs-webgl.common/init-shaders","fragment-shader","cljs-webgl.shaders/get-shader","vertex-shader","cljs_webgl.shaders.create_program.cljs$core$IFn$_invoke$arity$variadic","cljs-webgl.common/get-perspective-matrix","map__25553","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","viewport-width","viewport-height","cljs-webgl.context/get-viewport","js/module$node_modules$gl_matrix$cjs$index.mat4","cljs-webgl.common/get-position-matrix","v","m","cljs.core/clj->js","cljs-webgl.common/deg->rad","degrees","Math/PI","cljs-webgl.common/animate","draw-fn","frame","js/window","loop","fexpr__25555","cljs-webgl.common/load-image","url","callback-fn","img","js/Image","cljs-webgl.common/load-texture","gl-context","G__25556","cljs_webgl.texture.create_texture.cljs$core$IFn$_invoke$arity$variadic","cljs-webgl.constants.webgl/unpack-flip-y-webgl","cljs-webgl.constants.texture-parameter-name/texture-mag-filter","cljs-webgl.constants.texture-filter/nearest","cljs-webgl.constants.texture-parameter-name/texture-min-filter","cljs-webgl.common/checked?","element-id","js/document","cljs-webgl.common/get-float","js/parseFloat","cljs-webgl.common/ambient-color","cljs-webgl.typed-arrays/float32","cljs-webgl.common/directional-color","cljs-webgl.common/lighting-direction","lighting-dir","adjusted-dir","js/module$node_modules$gl_matrix$cjs$index.vec3","cljs-webgl.common/blending","use-blending?","cljs-webgl.common/lighting","use-lighting?","cljs.core/cons","cljs-webgl.typed-arrays/int32"],"sourcesContent":["(ns cljs-webgl.common\n  (:require\n    [\"gl-matrix\" :refer (mat4 vec3)]\n    [cljs-webgl.buffers :refer [create-buffer clear-color-buffer draw!]]\n    [cljs-webgl.context :refer [get-context get-viewport]]\n    [cljs-webgl.shaders :refer [get-shader create-program get-attrib-location]]\n    [cljs-webgl.texture :refer [create-texture]]\n    [cljs-webgl.constants.texture-parameter-name :as texture-parameter-name]\n    [cljs-webgl.constants.texture-filter :as texture-filter]\n    [cljs-webgl.constants.webgl :as webgl]\n    [cljs-webgl.typed-arrays :as ta]))\n\n(enable-console-print!)\n\n(defn init-gl [canvas]\n  (let [gl (get-context canvas)]\n    (when-not gl\n      (throw (js/Error. \"Could not initialize WebGL\")))\n    gl))\n\n(defn init-shaders [gl]\n  (let [fragment-shader (get-shader gl \"shader-fs\")\n        vertex-shader (get-shader gl \"shader-vs\")]\n    (create-program gl fragment-shader vertex-shader)))\n\n(defn get-perspective-matrix [gl]\n  (let [{viewport-width :width,\n         viewport-height :height} (get-viewport gl)]\n    (.perspective\n      mat4\n      (.create mat4)\n      45\n      (/  viewport-width viewport-height)\n      0.1\n      100.0)))\n\n(defn get-position-matrix [v]\n  (let [m (.create mat4)]\n    (.identity mat4 m)\n    (.translate mat4 m m (clj->js v))))\n\n(defn deg->rad [degrees]\n  (/ (* degrees Math/PI) 180))\n\n(defn animate [draw-fn]\n  (letfn [(loop [frame]\n            (fn []\n              (.requestAnimFrame  js/window (loop (inc frame)))\n              (draw-fn frame)))]\n    ((loop 0))))\n\n(defn load-image\n  \"\"\n  [url callback-fn]\n  (let [img (js/Image.)]\n    (set! (.-onload img) (fn [] (callback-fn img)))\n    (set! (.-crossOrigin img) \"anonymous\")\n    (set! (.-src img) url)))\n\n; TODO: probably want to parameterize some of the details here\n; TODO: deprecate this method?\n(defn load-texture\n  \"Loads the texture from the given URL. Note that the image is loaded in the background,\n   and the returned texture will not immediately be fully initialized.\"\n  [gl-context url callback-fn]\n  (load-image url (fn [img] (callback-fn\n                              (create-texture\n                                gl-context\n                                :image img\n                                :pixel-store-modes {webgl/unpack-flip-y-webgl true}\n                                :parameters {texture-parameter-name/texture-mag-filter texture-filter/nearest\n                                             texture-parameter-name/texture-min-filter texture-filter/nearest})))))\n\n(defn checked? [element-id]\n  (.-checked\n    (.getElementById\n      js/document\n      element-id)))\n\n(defn get-float [element-id]\n  (js/parseFloat\n    (.-value\n      (.getElementById\n        js/document\n        element-id))))\n\n(defn ambient-color []\n  {:name \"uAmbientColor\"\n   :type :vec3\n   :values (ta/float32 [\n              (get-float \"ambientR\")\n              (get-float \"ambientG\")\n              (get-float \"ambientB\")])})\n\n(defn directional-color []\n  {:name \"uDirectionalColor\"\n   :type :vec3\n   :values (ta/float32 [\n              (get-float \"directionalR\")\n              (get-float \"directionalG\")\n              (get-float \"directionalB\")])})\n\n(defn lighting-direction []\n  (let [lighting-dir (ta/float32 [\n                        (get-float \"lightDirectionX\")\n                        (get-float \"lightDirectionY\")\n                        (get-float \"lightDirectionZ\")])\n        adjusted-dir (.create vec3)]\n\n    (.normalize vec3 adjusted-dir lighting-dir)\n    (.scale vec3 adjusted-dir adjusted-dir -1.0)\n\n    {:name \"uLightingDirection\"\n     :type :vec3\n     :values adjusted-dir}))\n\n(defn blending [use-blending?]\n  (when use-blending?\n    [{:name \"uAlpha\"\n      :type :float\n      :values (ta/float32 [(get-float \"alpha\")])}]))\n\n(defn lighting [use-lighting?]\n  (cons\n    {:name \"uUseLighting\" :type :int :values (ta/int32 [(if use-lighting? 1 0)])}\n    (when use-lighting?\n      [(ambient-color) (lighting-direction) (directional-color) ])))\n"]}