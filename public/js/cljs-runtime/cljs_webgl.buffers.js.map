{"version":3,"sources":["cljs_webgl/buffers.cljs"],"mappings":"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","names":["var_args","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","cljs-webgl.buffers/create-buffer","p__25411","vec__25412","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","seq25403","G__25404","cljs.core/first","cljs.core/next","G__25405","G__25406","G__25407","self__4717__auto__","gl-context","data","target","usage","item-size","buffer","cljs.core/quot","cljs-webgl.buffers/clear-color-buffer","red","green","blue","alpha","cljs-webgl.constants.clear-buffer-mask/color-buffer-bit","cljs-webgl.buffers/clear-depth-buffer","depth","cljs-webgl.constants.clear-buffer-mask/depth-buffer-bit","cljs-webgl.buffers/clear-stencil-buffer","index","cljs-webgl.constants.clear-buffer-mask/stencil-buffer-bit","p__25418","map__25419","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","cljs-webgl.buffers/set-uniform","shader","name","type","values","transpose","uniform-location","cljs-webgl.shaders/get-uniform-location","G__25426","cljs.core/Keyword","p__25430","map__25435","cljs-webgl.buffers/set-attribute","location","components-per-vertex","normalized?","stride","offset","cljs-webgl.constants.buffer-object/array-buffer","or__4131__auto__","cljs-webgl.constants.data-type/float","p__25461","map__25466","cljs-webgl.buffers/set-texture","texture","texture-unit","unit","cljs-webgl.constants.texture-unit/texture0","uniform-index","cljs-webgl.constants.texture-target/texture-2d","cljs-webgl.buffers/default-capabilities","cljs-webgl.constants.capability/blend","cljs-webgl.constants.capability/cull-face","cljs-webgl.constants.capability/depth-test","cljs-webgl.constants.capability/dither","cljs-webgl.constants.capability/polygon-offset-fill","cljs-webgl.constants.capability/sample-alpha-to-coverage","cljs-webgl.constants.capability/sample-coverage","cljs-webgl.constants.capability/scissor-test","cljs-webgl.constants.capability/stencil-test","cljs-webgl.buffers/set-capability","capability","enabled?","p__25489","map__25490","cljs-webgl.buffers/set-viewport","x","y","width","height","viewport","cljs-webgl.buffers/draw!","p__25499","map__25500","seq25497","G__25498","draw-mode","first","count","attributes","uniforms","textures","element-array","capabilities","blend-function","opts","cljs-webgl.context/get-drawing-buffer-width","cljs-webgl.context/get-drawing-buffer-height","seq__25502","cljs.core/seq","chunk__25503","count__25504","i__25505","temp__5735__auto__","cljs.core/chunked-seq?","c__4550__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","u","seq__25519","chunk__25520","count__25521","i__25522","a","seq__25523","chunk__25524","count__25525","i__25526","t","seq__25527","chunk__25528","count__25529","i__25530","vec__25537","vec__25540","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","cljs-webgl.constants.buffer-object/element-array-buffer","seq__25543","chunk__25544","count__25545","i__25546","seq__25547","chunk__25548","count__25549","i__25550","vec__25557","vec__25560","k","v"],"sourcesContent":["(ns cljs-webgl.buffers\n  (:require\n    [cljs-webgl.context :as context]\n    [cljs-webgl.typed-arrays :as ta]\n    [cljs-webgl.constants.capability :as capability]\n    [cljs-webgl.constants.clear-buffer-mask :as clear-buffer]\n    [cljs-webgl.constants.buffer-object :as buffer-object]\n    [cljs-webgl.constants.texture-target :as texture-target]\n    [cljs-webgl.constants.texture-unit :as texture-unit]\n    [cljs-webgl.constants.data-type :as data-type]\n    [cljs-webgl.shaders :as shaders]))\n\n(defn create-buffer\n  \"Creates a new buffer with initialized `data`.\n\n  `data` must be a typed-array\n\n  `target` may be `cljs-webgl.constants.buffer-object/array-buffer` or `cljs-webgl.constants.buffer-object/element-array-buffer`\n\n  `usage` may be `cljs-webgl.constants.buffer-object/static-draw` or `cljs-webgl.constants.buffer-object/dynamic-draw`\n\n  `item-size` [optional] will set the item size as an attribute on the buffer, and the calculate the number of items accordingly.\n\n  Relevant OpenGL ES reference pages:\n\n  * [glGenBuffers(Similar to createBuffer)](http://www.khronos.org/opengles/sdk/docs/man/xhtml/glGenBuffers.xml)\n  * [glBindBuffer](http://www.khronos.org/opengles/sdk/docs/man/xhtml/glBindBuffer.xml)\n  * [glBufferData](http://www.khronos.org/opengles/sdk/docs/man/xhtml/glBufferData.xml)\"\n  [gl-context data target usage & [item-size]]\n  (let [buffer (.createBuffer gl-context)]\n    (.bindBuffer gl-context target buffer)\n    (.bufferData gl-context target data usage)\n    (when item-size\n      (set! (.-itemSize buffer) item-size)\n      (set! (.-numItems buffer) (quot (.-length data) item-size)))\n    buffer))\n\n(defn clear-color-buffer\n  \"Clears the color buffer with specified `red`, `green`, `blue` and `alpha` values.\n\n  Relevant OpenGL ES reference pages:\n\n  * [glClearColor](http://www.khronos.org/opengles/sdk/docs/man/xhtml/glClearColor.xml)\n  * [glClear](http://www.khronos.org/opengles/sdk/docs/man/xhtml/glClear.xml)\"\n  [gl-context red green blue alpha]\n  (.clearColor gl-context red green blue alpha)\n  (.clear gl-context clear-buffer/color-buffer-bit)\n  gl-context)\n\n(defn clear-depth-buffer\n  \"Clears the depth buffer with specified `depth` value.\n\n  Relevant OpenGL ES reference pages:\n\n  * [glClearDepthf](http://www.khronos.org/opengles/sdk/docs/man/xhtml/glClearDepthf.xml)\n  * [glClear](http://www.khronos.org/opengles/sdk/docs/man/xhtml/glClear.xml)\"\n  [gl-context depth]\n  (.clearDepth gl-context depth)\n  (.clear gl-context clear-buffer/depth-buffer-bit)\n  gl-context)\n\n(defn clear-stencil-buffer\n  \"Clears the stencil buffer with specified `index` value.\n\n  Relevant OpenGL ES reference pages:\n\n  * [glClearStencil](http://www.khronos.org/opengles/sdk/docs/man/xhtml/glClearStencil.xml)\n  * [glClear](http://www.khronos.org/opengles/sdk/docs/man/xhtml/glClear.xml)\"\n  [gl-context index]\n  (.clearStencil gl-context index)\n  (.clear gl-context clear-buffer/stencil-buffer-bit)\n  gl-context)\n\n(defn ^:private set-uniform\n  [gl-context shader {:keys [name type values transpose]}]\n  (let [uniform-location (shaders/get-uniform-location gl-context shader name)]\n    (case type\n      :bool   (.uniform1fv gl-context uniform-location values)\n      :bvec2  (.uniform2fv gl-context uniform-location values)\n      :bvec3  (.uniform3fv gl-context uniform-location values)\n      :bvec4  (.uniform4fv gl-context uniform-location values)\n      :float  (.uniform1fv gl-context uniform-location values)\n      :vec2   (.uniform2fv gl-context uniform-location values)\n      :vec3   (.uniform3fv gl-context uniform-location values)\n      :vec4   (.uniform4fv gl-context uniform-location values)\n      :int    (.uniform1iv gl-context uniform-location values)\n      :ivec2  (.uniform2iv gl-context uniform-location values)\n      :ivec3  (.uniform3iv gl-context uniform-location values)\n      :ivec4  (.uniform4iv gl-context uniform-location values)\n      :mat2   (.uniformMatrix2fv gl-context uniform-location transpose values)\n      :mat3   (.uniformMatrix3fv gl-context uniform-location transpose values)\n      :mat4   (.uniformMatrix4fv gl-context uniform-location transpose values)\n      nil)))\n\n(defn ^:private set-attribute\n  [gl-context {:keys [buffer location components-per-vertex type normalized? stride offset]}]\n  (.bindBuffer\n    gl-context\n    buffer-object/array-buffer\n    buffer)\n\n  (.enableVertexAttribArray\n    gl-context\n    location)\n\n  (.vertexAttribPointer\n    gl-context\n    location\n    (or components-per-vertex (.-itemSize buffer))\n    (or type data-type/float)\n    (or normalized? false)\n    (or stride 0)\n    (or offset 0)))\n\n(defn ^:private set-texture\n  [gl-context shader {:keys [texture name texture-unit]}]\n  (let [unit (if texture-unit (+ texture-unit/texture0 texture-unit)\n                              texture-unit/texture0)\n        uniform-index (or texture-unit 0)]\n\n    (.activeTexture\n      gl-context\n      texture-unit/texture0)\n\n    (.bindTexture\n      gl-context\n      texture-target/texture-2d\n      texture)\n\n    (.uniform1i\n      gl-context\n      (shaders/get-uniform-location gl-context shader name)\n      0)))\n\n(def ^:private default-capabilities\n  {capability/blend                    false\n   capability/cull-face                false\n   capability/depth-test               false\n   capability/dither                   true\n   capability/polygon-offset-fill      false\n   capability/sample-alpha-to-coverage false\n   capability/sample-coverage          false\n   capability/scissor-test             false\n   capability/stencil-test             false})\n\n(defn ^:private set-capability\n  \"Enables/disables according to `enabled?` a given server-side GL `capability`\n\n   The valid values for `capability` are: `cljs-webgl.constants.capability/blend`,\n   `cljs-webgl.constants.capability/cull-face`, `cljs-webgl.constants.capability/depth-test`, `cljs-webgl.constants.capability/dither`,\n   `cljs-webgl.constants.capability/polygon-offset-fill`, `cljs-webgl.constants.capability/sample-alpha-to-coverage`,\n   `cljs-webgl.constants.capability/sample-coverage`, `cljs-webgl.constants.capability/scissor-test`,\n   `cljs-webgl.constants.capability/stencil-test`\n\n   Relevant OpenGL ES reference pages:\n\n   * [glEnable](http://www.khronos.org/opengles/sdk/docs/man/xhtml/glEnable.xml)\n   * [glDisable](http://www.khronos.org/opengles/sdk/docs/man/xhtml/glDisable.xml)\"\n  [gl-context capability enabled?]\n\n  (if enabled?\n    (.enable gl-context capability)\n    (.disable gl-context capability))\n  gl-context)\n\n(defn ^:private set-viewport\n  \"Sets `gl-context` viewport according to `viewport` which is expected to have the form:\n\n  {:x,\n   :y,\n   :width,\n   :height}\n\n  Relevant OpenGL ES reference pages:\n\n  * [viewport](http://www.khronos.org/opengles/sdk/docs/man/xhtml/glViewport.xml)\"\n  [gl-context {:keys [x y width height] :as viewport}]\n  (.viewport gl-context x y width height))\n\n(defn draw!\n  [gl-context & {:keys [shader draw-mode first count attributes\n                        uniforms textures element-array capabilities\n                        blend-function viewport] :as opts}]\n\n  (set-viewport gl-context (or viewport\n                               {:x      0,\n                                :y      0,\n                                :width  (context/get-drawing-buffer-width gl-context),\n                                :height (context/get-drawing-buffer-height gl-context)}))\n\n  (.useProgram gl-context shader)\n\n  (doseq [u uniforms]\n    (set-uniform gl-context shader u))\n\n  (doseq [a attributes]\n    (set-attribute gl-context a))\n\n  (doseq [t textures]\n    (set-texture gl-context shader t))\n\n  (doseq [[capability enabled?] (merge default-capabilities capabilities)]\n    (set-capability gl-context capability enabled?))\n\n  (if (nil? element-array)\n    (.drawArrays gl-context draw-mode (or first 0) count)\n    (do\n      (.bindBuffer gl-context buffer-object/element-array-buffer (:buffer element-array))\n      (.drawElements gl-context draw-mode count (:type element-array) (:offset element-array))))\n\n  (doseq [a attributes]\n    (.disableVertexAttribArray gl-context (:location a)))\n\n  (doseq [[k v] blend-function]\n    (.blendFunc gl-context k v))\n\n  gl-context)\n"]}