{"version":3,"sources":["oh_gee/core.cljs"],"mappings":";;;;;;;;;;;AAWA,AAAKA,AAAEC;AACP,AAAKC,AAAEC;AAEP,AAAA,AAAKC;AAwBL,AAAA,AAAKC;AAkBL,AAAKC,AAAO,AAAA,AAAiBC;AAC7B,AAAKC,AAAG,AAACC,AAAoBH;AAC7B,AAAKI,AAAO,AAACC,AAAuBH,AACA,AAACI,AAAsBJ,AAAGK,AAAqBT,AAC/C,AAACQ,AAAsBJ,AAAGM,AAAuBT;AACrF,AAAKU,AAAc,AAACC,AAAsBR,AAAG,AAACS,AACC,AAACC,AACC,AAAAC,AAAA,AAAAC;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAD,AAAAA;;AAAA,AAAA,AAAAE,AAAA,AAAAC,AAAAH;AAAA,AAAA,AAAAE;AAAA,AAAA,AAAAF,AAAAE;AAAA,AAAA,AAAA,AAAAE,AAAAJ;AAAA,AAAAK,AAo2EE,AAAAqD,AAAA1D;AAp2EFM,AAAA,AAAAC,AAAAF;AAAAG,AAAA,AAAAC,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAI,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAJ;AAAA,AAAA,AAAAK,AAAAN,AAAAK,AAAMU;AAAN,AAAA,AAAA,AAAAR,AAAAJ,AACE,AAAA,AAACe;AAADD;AAAA,AAAO,AAAI,AAAAA,AAAA,AAACE;AACH,AAAAF,AAAG,AAAA,AAAGF;;AADRE;;;AAAP,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;AADF,AAAA,AAAAZ,AAAA;;;;AAAA;;;;;AAAA,AAAAG,AAAA,AAAAC,AAAAN,AAAA,AAAAO,AAAA,AAAAC,AAAAhB;;AAAA,AAAAa,AAAA,AAAAC,AAAAN,AAAA;;;AAAA,AAAA,AAAAS,AAAAjB,AAAMoB;AAAN,AAAA,AAAAF,AACE,AAAA,AAACK;AAADD;AAAA,AAAO,AAAI,AAAAA,AAAA,AAACE;AACH,AAAAF,AAAG,AAAA,AAAGF;;AADRE;;;AADT,AAAAP,AAAA,AAAAI,AAAAnB,AACE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;AADF;;;;AAAA,AAAA;;AAAA,AAAA,AAAAD,AAAQ,AAAA,AAACsB;AAWhBI,AACAC;AAO1C,AAAKC,AAAe,AAAC/B,AAAsBR,AAAG,AAACwC,AACC,AAAC9B,AACC,AAAAC,AAAA,AAAA8B;AAAA,AAAA,AAAA5B,AAAA,AAAA;AAAA,AAAA,AAAA4B,AAAAA;;AAAA,AAAA,AAAA3B,AAAA,AAAAC,AAAA0B;AAAA,AAAA,AAAA3B;AAAA,AAAA,AAAA2B,AAAA3B;AAAA,AAAA,AAAA,AAAAE,AAAAyB;AAAA,AAAAxB,AA+0EC,AAAAqD,AAAA7B;AA/0EDvB,AAAA,AAAAC,AAAAF;AAAAyB,AAAA,AAAArB,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAyB,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAzB;AAAA,AAAA,AAAAK,AAAAN,AAAA0B,AAAMX;AAAN,AAAA,AAAA,AAAAR,AAAAkB,AACE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACP,AAAK,AAACU,AAAQC,AAAE,AAAA,AAAGd;;AADtB,AAAA,AAAAW,AAAA;;;;AAAA;;;;;AAAA,AAAAlB,AAAA,AAAAC,AAAAgB,AAAA,AAAAE,AAAA,AAAAhB,AAAAa;;AAAA,AAAAhB,AAAA,AAAAC,AAAAgB,AAAA;;;AAAA,AAAA,AAAAb,AAAAY,AAAMT;AAAN,AAAA,AAAAF,AAAA,AAAAc,AAAA,AAAAb,AAAAU,AACE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACN,AAAK,AAACU,AAAQC,AAAE,AAAA,AAAGd;;;AADtB;;;;AAAA,AAAA;;AAAA,AAAA,AAAArB,AAAQ,AAAA,AAACsB;AAMhBc,AACAT;AAE3C,AAAA,AAAMU,AAAMC,AAAMC,AAAQC;AAA1B,AACE,AAAMC,AAAkB,AAAI,AAAA,AAAO,AAAA,AAACC,AAAIJ,AACd;AACE,AAAA,AAACK,AACIH,AACAD,AACA,AAAA,AAAY,AAAGC,AAAGD;;AAEvBC;;AACFD;AACpBK,AAAgB,AAAA,AAAA;AATtB,AAUMvD,AACA,AAAA,AAAA,AAAA,AAAA,AAACwD,AACD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACC,AAAsBvD,AACGwD,AACJH,AAGGhD,AACE,AAAA,AAACoD,AAA4B3D,AAAGE,AAEpC0D,AAQ6B,AAAA,AAACnD,AAAmBwC,AACxB,AAAA,AAACxC,AAAYjB,AACb,AAAA,AAACiB,AAAYf,AACP,AAACmE,AAA8B7D,AAC9B,AAAA,AAAA,AAAA,AAAA,AAAC8D,AAIhCvB,AACDgB,AACDQ;;AAG1B,AAAwBC,AAAU;AAAKC;AAAL,AAAmB,AAAAC,AAAM,AAAA,AAAKjB;AAAXkB,AACMf;AADNgB,AAEMH;AAFN,AAAA,AAAAC,AAAAC,AAAAC,AAAAF,AAAAC,AAAAC,AAACpB,AAAAA,AAAAA;;;;AAI1D,AAAA,AAAMqB;AAAN,AACE,AAAM,AAASvE,AAAQN;;AACvB,AAAM,AAAUM,AAAQJ;;AACxB,AAAwBsE,AAAU,AAAKC;AAAL,AAAmB,AAAA,AAAA,AAACjB,AAASiB","names":["oh-gee.core/w","js/window.innerWidth","oh-gee.core/h","js/window.innerHeight","oh-gee.core/vertex-shader-source","oh-gee.core/fragment-shader-source","oh-gee.core/canvas","js/document","oh-gee.core/gl","cljs_webgl.context.get_context.cljs$core$IFn$_invoke$arity$1","oh-gee.core/shader","cljs_webgl.shaders.create_program.cljs$core$IFn$_invoke$arity$variadic","cljs-webgl.shaders/create-shader","cljs-webgl.constants.shader/vertex-shader","cljs-webgl.constants.shader/fragment-shader","oh-gee.core/vertex-buffer","cljs-webgl.buffers/create-buffer","cljs-webgl.typed-arrays/float32","cljs.core/flatten","iter__4523__auto__","s__25358","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4521__auto__","size__4522__auto__","cljs.core/count","b__25360","cljs.core/chunk-buffer","i__25359","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__25357","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","i","cljs.core.range.cljs$core$IFn$_invoke$arity$1","p1__25356#","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","cljs-webgl.constants.buffer-object/array-buffer","cljs-webgl.constants.buffer-object/static-draw","oh-gee.core/element-buffer","cljs-webgl.typed-arrays/unsigned-int16","s__25362","b__25364","i__25363","iter__25361","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","cljs.core/+","cljs-webgl.constants.buffer-object/element-array-buffer","oh-gee.core/draw","frame","last-dt","dt","maybe-new-last-dt","cljs.core/mod","cljs.core.prn.cljs$core$IFn$_invoke$arity$variadic","triangles-count","cljs-webgl.buffers/clear-color-buffer","cljs_webgl.buffers.draw_BANG_.cljs$core$IFn$_invoke$arity$variadic","cljs-webgl.constants.draw-mode/triangles","cljs-webgl.shaders/get-attrib-location","cljs-webgl.constants.data-type/float","cljs-webgl.common/get-perspective-matrix","cljs-webgl.common/get-position-matrix","cljs-webgl.constants.data-type/unsigned-short","js/window","time-elapsed","G__25365","G__25366","G__25367","oh-gee.core/init","cljs.core/chunk-first"],"sourcesContent":["(ns oh-gee.core\n  (:require [cljs-webgl.common :as common]\n            [cljs-webgl.context :as context]\n            [cljs-webgl.shaders :as shaders]\n            [cljs-webgl.constants.draw-mode :as draw-mode]\n            [cljs-webgl.constants.data-type :as data-type]\n            [cljs-webgl.constants.buffer-object :as buffer-object]\n            [cljs-webgl.constants.shader :as shader]\n            [cljs-webgl.buffers :as buffers]\n            [cljs-webgl.typed-arrays :as ta]))\n\n(def w js/window.innerWidth)\n(def h js/window.innerHeight)\n\n(def vertex-shader-source\n  \"\n  precision mediump float;\n\n  attribute vec3 aVertexPosition;\n  //attribute vec4 aVertexColor;\n\n  uniform mat4 uMVMatrix;\n  uniform mat4 uPMatrix;\n\n  uniform float frame;\n\n  //varying vec4 vColor;\n\n  void main(void) {\n  vec3 pos;\n  pos = aVertexPosition;\n  pos.x = pos.x + sin(frame * pos.y * 0.1);\n  pos.y = pos.y + sin(frame * pos.x * 0.00005);\n  gl_Position = uPMatrix * uMVMatrix * vec4(pos, 1.0);\n  //vColor = aVertexColor;\n  }\n  \")\n\n(def fragment-shader-source\n  \"precision mediump float;\n   uniform float frame;\n   uniform float w;\n   uniform float h;\n\n   //varying vec4 vColor;\n\n   void main() {\n     vec3 pos = vec3(gl_PointCoord.xy, 0);\n     float f = frame;\n     float a = pow(sin(50.0 * pos.y) * sin(50.0 * pos.x), 2.0) + pow(sin(frame * 0.3), 2.0) + 0.1;\n     gl_FragColor.r = a;\n     gl_FragColor.g = a;\n     gl_FragColor.b = a;\n     gl_FragColor.a = 1.0;\n   }\")\n\n(def canvas (.getElementById js/document \"canvas\"))\n(def gl (context/get-context canvas))\n(def shader (shaders/create-program gl\n                                    (shaders/create-shader gl shader/vertex-shader vertex-shader-source)\n                                    (shaders/create-shader gl shader/fragment-shader fragment-shader-source)))\n(def vertex-buffer (buffers/create-buffer gl (ta/float32\n                                               (flatten\n                                                 (for [i (range 100)]\n                                                   (mapv #(if (not= % 0.0)\n                                                            (+ (/ i 10.0) %)\n                                                            %)\n                                                   [1.0 1.0 0.0\n                                                    -1.0 1.0 0.0\n                                                    1.0 -1.0 0.0\n                                                    -1.0 -1.0 0.0]\n                                                   )\n                                                   ))\n                                               )\n                                          buffer-object/array-buffer\n                                          buffer-object/static-draw))\n;; vertex-color-buffer (buffers/create-buffer gl (ta/float32 [0.1 0.1 0.0 1.0\n;;                                                      0.1 0.9 0.0 1.0\n;;                                                      0.1 0.1 0.9 1.0\n;;                                                      0.1 0.1 0.0 1.0])\n;;                                      buffer-object/array-buffer\n;;                                      buffer-object/static-draw)\n(def element-buffer (buffers/create-buffer gl (ta/unsigned-int16\n                                                (flatten\n                                                  (for [i (range 100)]\n                                                    (mapv (partial + (* i 4))\n                                                    [0 1 2 2 1 3]\n                                                    )\n                                                    ))\n                                                )\n                                           buffer-object/element-array-buffer\n                                           buffer-object/static-draw))\n\n(defn draw [frame last-dt dt]\n  (let [maybe-new-last-dt (if (zero? (mod frame 300))\n                            (do\n                              (prn :something\n                                   dt\n                                   last-dt\n                                   (/ 300000.0 (- dt last-dt))\n                                   )\n                              dt)\n                            last-dt)\n        triangles-count (* 6 100)]\n    (-> gl\n        (buffers/clear-color-buffer 0 0 0 1)\n        (buffers/draw! :shader shader\n                       :draw-mode draw-mode/triangles\n                       :count triangles-count\n\n                       :attributes\n                       [{:buffer vertex-buffer\n                         :location (shaders/get-attrib-location gl shader \"aVertexPosition\")\n                         :components-per-vertex 3\n                         :type data-type/float}\n                        ;; {:buffer vertex-color-buffer\n                        ;;  :location (shaders/get-attrib-location gl shader \"aVertexColor\")\n                        ;;  :components-per-vertex 4\n                        ;;  :type data-type/float}\n                        ]\n\n                       :uniforms\n                       [{:name \"frame\" :type :float :values (ta/float32 [(float frame)])}\n                        {:name \"w\" :type :float :values (ta/float32 [w])}\n                        {:name \"h\" :type :float :values (ta/float32 [h])}\n                        {:name \"uPMatrix\" :type :mat4 :values (common/get-perspective-matrix gl)}\n                        {:name \"uMVMatrix\" :type :mat4 :values (common/get-position-matrix [-5.5 -3.0 -10.0])}\n                        ]\n\n                       :element-array\n                       {:buffer element-buffer\n                        :count triangles-count\n                        :type data-type/unsigned-short\n                        :offset 0}))\n\n    (.requestAnimationFrame js/window (fn [time-elapsed] (draw (inc frame)\n                                                               maybe-new-last-dt\n                                                               time-elapsed)))))\n\n(defn init []\n  (set! (.-width canvas) w)\n  (set! (.-height canvas) h)\n  (.requestAnimationFrame js/window (fn [time-elapsed] (draw 0 0 time-elapsed))))\n"]}