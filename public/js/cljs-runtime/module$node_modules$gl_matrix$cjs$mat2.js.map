{
"version":3,
"file":"module$node_modules$gl_matrix$cjs$mat2.js",
"lineCount":8,
"mappings":"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",
"sources":["node_modules/gl-matrix/cjs/mat2.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$gl_matrix$cjs$mat2\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.create = create;\nexports.clone = clone;\nexports.copy = copy;\nexports.identity = identity;\nexports.fromValues = fromValues;\nexports.set = set;\nexports.transpose = transpose;\nexports.invert = invert;\nexports.adjoint = adjoint;\nexports.determinant = determinant;\nexports.multiply = multiply;\nexports.rotate = rotate;\nexports.scale = scale;\nexports.fromRotation = fromRotation;\nexports.fromScaling = fromScaling;\nexports.str = str;\nexports.frob = frob;\nexports.LDU = LDU;\nexports.add = add;\nexports.subtract = subtract;\nexports.exactEquals = exactEquals;\nexports.equals = equals;\nexports.multiplyScalar = multiplyScalar;\nexports.multiplyScalarAndAdd = multiplyScalarAndAdd;\nexports.sub = exports.mul = void 0;\n\nvar glMatrix = _interopRequireWildcard(require(\"./common.js\"));\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }\n\n/**\r\n * 2x2 Matrix\r\n * @module mat2\r\n */\n\n/**\r\n * Creates a new identity mat2\r\n *\r\n * @returns {mat2} a new 2x2 matrix\r\n */\nfunction create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  out[0] = 1;\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat2 initialized with values from an existing matrix\r\n *\r\n * @param {mat2} a matrix to clone\r\n * @returns {mat2} a new 2x2 matrix\r\n */\n\n\nfunction clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Copy the values from one mat2 to another\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the source matrix\r\n * @returns {mat2} out\r\n */\n\n\nfunction copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Set a mat2 to the identity matrix\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @returns {mat2} out\r\n */\n\n\nfunction identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Create a new mat2 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\r\n * @returns {mat2} out A new 2x2 matrix\r\n */\n\n\nfunction fromValues(m00, m01, m10, m11) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m10;\n  out[3] = m11;\n  return out;\n}\n/**\r\n * Set the components of a mat2 to the given values\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\r\n * @returns {mat2} out\r\n */\n\n\nfunction set(out, m00, m01, m10, m11) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m10;\n  out[3] = m11;\n  return out;\n}\n/**\r\n * Transpose the values of a mat2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the source matrix\r\n * @returns {mat2} out\r\n */\n\n\nfunction transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache\n  // some values\n  if (out === a) {\n    var a1 = a[1];\n    out[1] = a[2];\n    out[2] = a1;\n  } else {\n    out[0] = a[0];\n    out[1] = a[2];\n    out[2] = a[1];\n    out[3] = a[3];\n  }\n\n  return out;\n}\n/**\r\n * Inverts a mat2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the source matrix\r\n * @returns {mat2} out\r\n */\n\n\nfunction invert(out, a) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3]; // Calculate the determinant\n\n  var det = a0 * a3 - a2 * a1;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = a3 * det;\n  out[1] = -a1 * det;\n  out[2] = -a2 * det;\n  out[3] = a0 * det;\n  return out;\n}\n/**\r\n * Calculates the adjugate of a mat2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the source matrix\r\n * @returns {mat2} out\r\n */\n\n\nfunction adjoint(out, a) {\n  // Caching this value is nessecary if out == a\n  var a0 = a[0];\n  out[0] = a[3];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a0;\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat2\r\n *\r\n * @param {mat2} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\n\nfunction determinant(a) {\n  return a[0] * a[3] - a[2] * a[1];\n}\n/**\r\n * Multiplies two mat2's\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the first operand\r\n * @param {mat2} b the second operand\r\n * @returns {mat2} out\r\n */\n\n\nfunction multiply(out, a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = a0 * b0 + a2 * b1;\n  out[1] = a1 * b0 + a3 * b1;\n  out[2] = a0 * b2 + a2 * b3;\n  out[3] = a1 * b2 + a3 * b3;\n  return out;\n}\n/**\r\n * Rotates a mat2 by the given angle\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2} out\r\n */\n\n\nfunction rotate(out, a, rad) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  out[0] = a0 * c + a2 * s;\n  out[1] = a1 * c + a3 * s;\n  out[2] = a0 * -s + a2 * c;\n  out[3] = a1 * -s + a3 * c;\n  return out;\n}\n/**\r\n * Scales the mat2 by the dimensions in the given vec2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the matrix to rotate\r\n * @param {vec2} v the vec2 to scale the matrix by\r\n * @returns {mat2} out\r\n **/\n\n\nfunction scale(out, a, v) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var v0 = v[0],\n      v1 = v[1];\n  out[0] = a0 * v0;\n  out[1] = a1 * v0;\n  out[2] = a2 * v1;\n  out[3] = a3 * v1;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2.identity(dest);\r\n *     mat2.rotate(dest, dest, rad);\r\n *\r\n * @param {mat2} out mat2 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2} out\r\n */\n\n\nfunction fromRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = -s;\n  out[3] = c;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2.identity(dest);\r\n *     mat2.scale(dest, dest, vec);\r\n *\r\n * @param {mat2} out mat2 receiving operation result\r\n * @param {vec2} v Scaling vector\r\n * @returns {mat2} out\r\n */\n\n\nfunction fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = v[1];\n  return out;\n}\n/**\r\n * Returns a string representation of a mat2\r\n *\r\n * @param {mat2} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\n\nfunction str(a) {\n  return 'mat2(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n}\n/**\r\n * Returns Frobenius norm of a mat2\r\n *\r\n * @param {mat2} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\n\nfunction frob(a) {\n  return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2));\n}\n/**\r\n * Returns L, D and U matrices (Lower triangular, Diagonal and Upper triangular) by factorizing the input matrix\r\n * @param {mat2} L the lower triangular matrix\r\n * @param {mat2} D the diagonal matrix\r\n * @param {mat2} U the upper triangular matrix\r\n * @param {mat2} a the input matrix to factorize\r\n */\n\n\nfunction LDU(L, D, U, a) {\n  L[2] = a[2] / a[0];\n  U[0] = a[0];\n  U[1] = a[1];\n  U[3] = a[3] - L[2] * U[1];\n  return [L, D, U];\n}\n/**\r\n * Adds two mat2's\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the first operand\r\n * @param {mat2} b the second operand\r\n * @returns {mat2} out\r\n */\n\n\nfunction add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the first operand\r\n * @param {mat2} b the second operand\r\n * @returns {mat2} out\r\n */\n\n\nfunction subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat2} a The first matrix.\r\n * @param {mat2} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\n\nfunction exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat2} a The first matrix.\r\n * @param {mat2} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\n\nfunction equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat2} out\r\n */\n\n\nfunction multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\r\n * Adds two mat2's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat2} out the receiving vector\r\n * @param {mat2} a the first operand\r\n * @param {mat2} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat2} out\r\n */\n\n\nfunction multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\r\n * Alias for {@link mat2.multiply}\r\n * @function\r\n */\n\n\nvar mul = multiply;\n/**\r\n * Alias for {@link mat2.subtract}\r\n * @function\r\n */\n\nexports.mul = mul;\nvar sub = subtract;\nexports.sub = sub;\n};"],
"names":["shadow$provide","global","require","module","exports","multiply","out","a","b","a0","a1","a2","a3","b0","b1","b2","b3","subtract","Object","defineProperty","value","create","glMatrix","ARRAY_TYPE","Float32Array","clone","copy","identity","fromValues","m00","m01","m10","m11","set","transpose","invert","det","adjoint","determinant","rotate","rad","s","Math","sin","c","cos","scale","v","v0","v1","fromRotation","fromScaling","str","frob","sqrt","pow","LDU","L","D","U","add","exactEquals","equals","abs","EPSILON","max","multiplyScalar","multiplyScalarAndAdd","sub","mul","_interopRequireWildcard","obj","__esModule","newObj","key","prototype","hasOwnProperty","call","desc","getOwnPropertyDescriptor","get","default"]
}
