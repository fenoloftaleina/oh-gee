{
"version":3,
"file":"module$node_modules$gl_matrix$cjs$vec2.js",
"lineCount":10,
"mappings":"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",
"sources":["node_modules/gl-matrix/cjs/vec2.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$gl_matrix$cjs$vec2\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.create = create;\nexports.clone = clone;\nexports.fromValues = fromValues;\nexports.copy = copy;\nexports.set = set;\nexports.add = add;\nexports.subtract = subtract;\nexports.multiply = multiply;\nexports.divide = divide;\nexports.ceil = ceil;\nexports.floor = floor;\nexports.min = min;\nexports.max = max;\nexports.round = round;\nexports.scale = scale;\nexports.scaleAndAdd = scaleAndAdd;\nexports.distance = distance;\nexports.squaredDistance = squaredDistance;\nexports.length = length;\nexports.squaredLength = squaredLength;\nexports.negate = negate;\nexports.inverse = inverse;\nexports.normalize = normalize;\nexports.dot = dot;\nexports.cross = cross;\nexports.lerp = lerp;\nexports.random = random;\nexports.transformMat2 = transformMat2;\nexports.transformMat2d = transformMat2d;\nexports.transformMat3 = transformMat3;\nexports.transformMat4 = transformMat4;\nexports.rotate = rotate;\nexports.angle = angle;\nexports.zero = zero;\nexports.str = str;\nexports.exactEquals = exactEquals;\nexports.equals = equals;\nexports.forEach = exports.sqrLen = exports.sqrDist = exports.dist = exports.div = exports.mul = exports.sub = exports.len = void 0;\n\nvar glMatrix = _interopRequireWildcard(require(\"./common.js\"));\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }\n\n/**\r\n * 2 Dimensional Vector\r\n * @module vec2\r\n */\n\n/**\r\n * Creates a new, empty vec2\r\n *\r\n * @returns {vec2} a new 2D vector\r\n */\nfunction create() {\n  var out = new glMatrix.ARRAY_TYPE(2);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec2 initialized with values from an existing vector\r\n *\r\n * @param {vec2} a vector to clone\r\n * @returns {vec2} a new 2D vector\r\n */\n\n\nfunction clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\r\n * Creates a new vec2 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @returns {vec2} a new 2D vector\r\n */\n\n\nfunction fromValues(x, y) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\r\n * Copy the values from one vec2 to another\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the source vector\r\n * @returns {vec2} out\r\n */\n\n\nfunction copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\r\n * Set the components of a vec2 to the given values\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @returns {vec2} out\r\n */\n\n\nfunction set(out, x, y) {\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\r\n * Adds two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\n\nfunction add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\n\nfunction subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  return out;\n}\n/**\r\n * Multiplies two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\n\nfunction multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  return out;\n}\n/**\r\n * Divides two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\n\nfunction divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to ceil\r\n * @returns {vec2} out\r\n */\n\n\nfunction ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to floor\r\n * @returns {vec2} out\r\n */\n\n\nfunction floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\n\nfunction min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\n\nfunction max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to round\r\n * @returns {vec2} out\r\n */\n\n\nfunction round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  return out;\n}\n/**\r\n * Scales a vec2 by a scalar number\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec2} out\r\n */\n\n\nfunction scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  return out;\n}\n/**\r\n * Adds two vec2's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec2} out\r\n */\n\n\nfunction scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\n\nfunction distance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return Math.sqrt(x * x + y * y);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\n\nfunction squaredDistance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return x * x + y * y;\n}\n/**\r\n * Calculates the length of a vec2\r\n *\r\n * @param {vec2} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\n\nfunction length(a) {\n  var x = a[0],\n      y = a[1];\n  return Math.sqrt(x * x + y * y);\n}\n/**\r\n * Calculates the squared length of a vec2\r\n *\r\n * @param {vec2} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\n\nfunction squaredLength(a) {\n  var x = a[0],\n      y = a[1];\n  return x * x + y * y;\n}\n/**\r\n * Negates the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to negate\r\n * @returns {vec2} out\r\n */\n\n\nfunction negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to invert\r\n * @returns {vec2} out\r\n */\n\n\nfunction inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  return out;\n}\n/**\r\n * Normalize a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to normalize\r\n * @returns {vec2} out\r\n */\n\n\nfunction normalize(out, a) {\n  var x = a[0],\n      y = a[1];\n  var len = x * x + y * y;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\n\nfunction dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1];\n}\n/**\r\n * Computes the cross product of two vec2's\r\n * Note that the cross product must by definition produce a 3D vector\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec3} out\r\n */\n\n\nfunction cross(out, a, b) {\n  var z = a[0] * b[1] - a[1] * b[0];\n  out[0] = out[1] = 0;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Performs a linear interpolation between two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec2} out\r\n */\n\n\nfunction lerp(out, a, b, t) {\n  var ax = a[0],\n      ay = a[1];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec2} out\r\n */\n\n\nfunction random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  out[0] = Math.cos(r) * scale;\n  out[1] = Math.sin(r) * scale;\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat2} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\n\nfunction transformMat2(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y;\n  out[1] = m[1] * x + m[3] * y;\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat2d\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat2d} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\n\nfunction transformMat2d(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y + m[4];\n  out[1] = m[1] * x + m[3] * y + m[5];\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat3\r\n * 3rd vector component is implicitly '1'\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat3} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\n\nfunction transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[3] * y + m[6];\n  out[1] = m[1] * x + m[4] * y + m[7];\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat4\r\n * 3rd vector component is implicitly '0'\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\n\nfunction transformMat4(out, a, m) {\n  var x = a[0];\n  var y = a[1];\n  out[0] = m[0] * x + m[4] * y + m[12];\n  out[1] = m[1] * x + m[5] * y + m[13];\n  return out;\n}\n/**\r\n * Rotate a 2D vector\r\n * @param {vec2} out The receiving vec2\r\n * @param {vec2} a The vec2 point to rotate\r\n * @param {vec2} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec2} out\r\n */\n\n\nfunction rotate(out, a, b, c) {\n  //Translate point to the origin\n  var p0 = a[0] - b[0],\n      p1 = a[1] - b[1],\n      sinC = Math.sin(c),\n      cosC = Math.cos(c); //perform rotation and translate to correct position\n\n  out[0] = p0 * cosC - p1 * sinC + b[0];\n  out[1] = p0 * sinC + p1 * cosC + b[1];\n  return out;\n}\n/**\r\n * Get the angle between two 2D vectors\r\n * @param {vec2} a The first operand\r\n * @param {vec2} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\n\n\nfunction angle(a, b) {\n  var x1 = a[0],\n      y1 = a[1],\n      x2 = b[0],\n      y2 = b[1];\n  var len1 = x1 * x1 + y1 * y1;\n\n  if (len1 > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len1 = 1 / Math.sqrt(len1);\n  }\n\n  var len2 = x2 * x2 + y2 * y2;\n\n  if (len2 > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len2 = 1 / Math.sqrt(len2);\n  }\n\n  var cosine = (x1 * x2 + y1 * y2) * len1 * len2;\n\n  if (cosine > 1.0) {\n    return 0;\n  } else if (cosine < -1.0) {\n    return Math.PI;\n  } else {\n    return Math.acos(cosine);\n  }\n}\n/**\r\n * Set the components of a vec2 to zero\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @returns {vec2} out\r\n */\n\n\nfunction zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec2} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\n\nfunction str(a) {\n  return 'vec2(' + a[0] + ', ' + a[1] + ')';\n}\n/**\r\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec2} a The first vector.\r\n * @param {vec2} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\n\nfunction exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec2} a The first vector.\r\n * @param {vec2} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\n\nfunction equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1];\n  var b0 = b[0],\n      b1 = b[1];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1));\n}\n/**\r\n * Alias for {@link vec2.length}\r\n * @function\r\n */\n\n\nvar len = length;\n/**\r\n * Alias for {@link vec2.subtract}\r\n * @function\r\n */\n\nexports.len = len;\nvar sub = subtract;\n/**\r\n * Alias for {@link vec2.multiply}\r\n * @function\r\n */\n\nexports.sub = sub;\nvar mul = multiply;\n/**\r\n * Alias for {@link vec2.divide}\r\n * @function\r\n */\n\nexports.mul = mul;\nvar div = divide;\n/**\r\n * Alias for {@link vec2.distance}\r\n * @function\r\n */\n\nexports.div = div;\nvar dist = distance;\n/**\r\n * Alias for {@link vec2.squaredDistance}\r\n * @function\r\n */\n\nexports.dist = dist;\nvar sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec2.squaredLength}\r\n * @function\r\n */\n\nexports.sqrDist = sqrDist;\nvar sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec2s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexports.sqrLen = sqrLen;\n\nvar forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 2;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n    }\n\n    return a;\n  };\n}();\n\nexports.forEach = forEach;\n};"],
"names":["shadow$provide","global","require","module","exports","create","out","glMatrix","ARRAY_TYPE","Float32Array","subtract","a","b","multiply","divide","distance","x","y","Math","sqrt","squaredDistance","length","squaredLength","Object","defineProperty","value","clone","fromValues","copy","set","add","ceil","floor","min","max","round","scale","scaleAndAdd","negate","inverse","normalize","len","dot","cross","z","lerp","t","ax","ay","random","r","RANDOM","PI","cos","sin","transformMat2","m","transformMat2d","transformMat3","transformMat4","rotate","c","p0","p1","sinC","cosC","angle","x1","y1","x2","y2","len1","len2","cosine","acos","zero","str","exactEquals","equals","a0","a1","b0","b1","abs","EPSILON","forEach","sqrLen","sqrDist","dist","div","mul","sub","_interopRequireWildcard","obj","__esModule","newObj","key","prototype","hasOwnProperty","call","desc","getOwnPropertyDescriptor","get","default","vec","stride","offset","count","fn","arg","l","i"]
}
